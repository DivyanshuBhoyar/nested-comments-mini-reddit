// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: main.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (content, post_id, user_email, parent_id)
VALUES ($1, $2, $3, $4) RETURNING id, post_id, user_email, content, created_at, parent_id
`

type CreateCommentParams struct {
	Content   string        `json:"content"`
	PostID    int32         `json:"post_id"`
	UserEmail string        `json:"user_email"`
	ParentID  sql.NullInt32 `json:"parent_id"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.queryRow(ctx, q.createCommentStmt, createComment,
		arg.Content,
		arg.PostID,
		arg.UserEmail,
		arg.ParentID,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.UserEmail,
		&i.Content,
		&i.CreatedAt,
		&i.ParentID,
	)
	return i, err
}

const createPost = `-- name: CreatePost :one
INSERT INTO posts (title, body, author_email)
VALUES ($1, $2, $3) RETURNING id, author_email, title, body, created_at
`

type CreatePostParams struct {
	Title       string `json:"title"`
	Body        string `json:"body"`
	AuthorEmail string `json:"author_email"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.queryRow(ctx, q.createPostStmt, createPost, arg.Title, arg.Body, arg.AuthorEmail)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.AuthorEmail,
		&i.Title,
		&i.Body,
		&i.CreatedAt,
	)
	return i, err
}

const getComments = `-- name: GetComments :many
SELECT c.id, c.content, c.created_at, c.parent_id, u.name as username
FROM comments c
JOIN users u ON c.user_email = u.email
WHERE c.post_id = $1
`

type GetCommentsRow struct {
	ID        int32         `json:"id"`
	Content   string        `json:"content"`
	CreatedAt sql.NullTime  `json:"created_at"`
	ParentID  sql.NullInt32 `json:"parent_id"`
	Username  string        `json:"username"`
}

// // get all comments for a post
func (q *Queries) GetComments(ctx context.Context, postID int32) ([]GetCommentsRow, error) {
	rows, err := q.query(ctx, q.getCommentsStmt, getComments, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCommentsRow
	for rows.Next() {
		var i GetCommentsRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.CreatedAt,
			&i.ParentID,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPost = `-- name: GetPost :one
SELECT p.title, p.body, p.created_at, users.name as userame
FROM  posts as p
JOIN  users ON p.author_email = users.email
WHERE p.id = $1
`

type GetPostRow struct {
	Title     string    `json:"title"`
	Body      string    `json:"body"`
	CreatedAt time.Time `json:"created_at"`
	Userame   string    `json:"userame"`
}

func (q *Queries) GetPost(ctx context.Context, id int32) (GetPostRow, error) {
	row := q.queryRow(ctx, q.getPostStmt, getPost, id)
	var i GetPostRow
	err := row.Scan(
		&i.Title,
		&i.Body,
		&i.CreatedAt,
		&i.Userame,
	)
	return i, err
}

const getPostFeed = `-- name: GetPostFeed :many
SELECT p.id, p.title, p.author_email, p.created_at, u.email
FROM posts p
INNER JOIN users u ON p.author_email = u.email
ORDER BY p.created_at DESC
`

type GetPostFeedRow struct {
	ID          int32     `json:"id"`
	Title       string    `json:"title"`
	AuthorEmail string    `json:"author_email"`
	CreatedAt   time.Time `json:"created_at"`
	Email       string    `json:"email"`
}

func (q *Queries) GetPostFeed(ctx context.Context) ([]GetPostFeedRow, error) {
	rows, err := q.query(ctx, q.getPostFeedStmt, getPostFeed)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostFeedRow
	for rows.Next() {
		var i GetPostFeedRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.AuthorEmail,
			&i.CreatedAt,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
